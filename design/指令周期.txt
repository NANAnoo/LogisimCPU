寄存器说明：
IR   -> 寄存指令
PC  -> 指令地址
NPC ->下一条指令地址
Regs[] ->寄存器组
imm ->寄存立即数
ALUo ->ALU计算结果
LMD -> 内存数据暂存

 此CPU共5个指令周期：

/////////////////////////////////////////////////////////////////////////////
取指令周期 (IF)
  IR<- Mem[PC]
  NPC <- PC+1
  以PC的值从存储器中取出指令放入IR；同时PC加一放入NPC备用

///////////////////////////////////////////////////////////////////////////////
指令译码/读寄存器（ID）：
   A <- Regs[rs]
   B <- Regs[rt]
   imm <- IR16...31
   进行指令译码，若有立即数，将其存入imm

///////////////////////////////////////////////////////////////////////////////
指令执行 / 计算有效地址 (EX)
  (1) LW  / SW 指令:
      ALUo<- A+imm
      ALU将操作数相加形成有效地址，并存入临时寄存器ALUo.

  (2) R-TYPE
      ALUo <- A funct B
       ALU 根据funct，对AB进行相应计算， 将结果置于ALUo

  (3) I-TYPE
      ALUo<- A   op   B
       ALU 根据funct，对AB进行相应计算， 将结果置于ALUo

  (4) Branch
      ALUo <- NPC + imm
      ALU将临时寄存器NPC和Imm中的值相加得到转移目标的地址，存入ALUo

///////////////////////////////////////////////////////////////////////////////   
存储器访问/分支完成周期(MEM) 
  (1) LW / SW
    LW : LMD <- MEM [ALUo]
     将存储器中地址位ALUo的值放入LMD中
    SW : Mem[ALUo]<- B
     将B中值存入存储器
  
（2）Branch
     if(COND) PC <- ALUo  else PC<-NPC
  (3)  JMP
     PC =  add

///////////////////////////////////////////////////////////////////////////////
写回周期 （WB）
   R-TYPE:
      Regs[rd]<- ALUo
   I-TYPE:
      Regs[rt] <- ALUo
   LW
      Regs[rt] <- LMD



ID 输出 R/I/J/BRANCH/LW/SW




















